#============================================================
# component profile
#
# implementation_id:
# type_name:
# description:
# version:
# vendor:
# category:
# activity_type:
# max_instance:
# language:
# lang_type:
#

#============================================================
# execution context options
#============================================================
#
# Periodic type ExecutionContext
#
# Other availabilities in OpenRTM-aist
#
# - ExtTrigExecutionContext: External triggered EC. It is embedded in
#                            OpenRTM library.
# - OpenHRPExecutionContext: External triggred paralell execution
#                            EC. It is embedded in OpenRTM
#                            library. This is usually used with
#                            OpenHRP3.
# - RTPreemptEC:             Real-time execution context for Linux
#                            RT-preemptive pathed kernel.
# - ArtExecutionContext:     Real-time execution context for ARTLinux
#                            (http://sourceforge.net/projects/art-linux/)
# exec_cxt.periodic.type: [specify periodic type EC]

#
# The execution cycle of ExecutionContext
#
# exec_cxt.periodic.rate: [Hz]

#
# Event driven execution context (not implemented yet)
#
# exec_cxt.event_driven.type: [specify event driven type EC]
#

#============================================================
# port configurations
#
# port.[port_name].[interface_name].type: [CORBA, Ice, others...]
# port.[port_name].[interface_name].instance_name: [provider only]
# port.[port_name].[interface_name].bind_to:       [consumer only]
#

#============================================================
# data port configurations
#
# port.[port_name].dataport.interface_type: [corba_cdr, raw_tcp, etc..]
# port.[port_name].dataport.dataflow_type: [push, pull]
# port.[port_name].dataport.subscription_type: [flash, new, periodic]
# port.[port_name].dataport.constraint: [constraint_specifier]
# port.[port_name].dataport.fan_out: [number of connection, InPort only]
# port.[port_name].dataport.fan_in: [number of connection, InPort only]

# publisher property
# port.[inport|outport].[port_name].publisher.push_rate: freq.
# port.[inport|outport].[port_name].publisher.push_policy: [all, new, skip, fifo]
# port.[inport|outport].[port_name].publisher.skip_count: [skip count]


# port.[port_name].dataport.[interface_type].[iface_dependent_options]:
#
# CORBA Any type dependent options
# port.[port_name].dataport.corba_any.inport_ref: read only
# port.[port_name].dataport.corba_any.outport_ref: read only
#
# Raw TCP type dependent options
# port.[port_name].dataport.raw_tcp.server_addr:

#
# port.[port_name].constraint: enable
#
# connector buffer configurations.
# port.[inport|outport].[port_name].buffer.length: 8
# port.[inport|outport].[port_name].buffer.write.full_policy: [overwrite, do_nothing, block]
# port.[inport|outport].[port_name].buffer.write.timeout: 1.0
# port.[inport|outport].[port_name].buffer.read.empty_policy: [readback, do_nothing, block]
# port.[inport|outport].[port_name].buffer.read.timeout: 1.0
#------------------------------------------------------------
#
#


#============================================================
# configuration parameters
#
# conf.[configuration_set_name].[parameter_name]:
# conf.__widget__.[parameter_name]: GUI control type for RTSystemEditor
# conf.__constraint__.[parameter_name]: Constraints for the value
#
#

#------------------------------------------------------------
# configuration sets
#
# conf.[configuration_set_name].[parameter_name]:

#------------------------------------------------------------
# GUI control option for RTSystemEditor
#------------------------------------------------------------
#
# Available GUI control options [__widget__]:
#
# conf.__widget__.[widget_name]:
#
# available wdget name:
# - text:          text box [default].
# - slider.<step>: Horizontal slider. <step> is step for the slider.
#                  A range constraints option is required. 
# - spin:          Spin button. A range constraitns option is required.
# - radio:         Radio button. An enumeration constraints is required.
# - checkbox:      Checkbox control. An enumeration constraints is
#                  required. The parameter has to be able to accept a
#                  comma separated list.
# - orderd_list:   Orderd list control.  An enumeration constraint is
#                  required. The parameter has to be able to accept a
#                  comma separated list. In this control, Enumerated
#                  elements can appear one or more times in the given list.
# examples:
# conf.__widget__.int_param0: slider.10
# conf.__widget__.int_param1: spin
# conf.__widget__.double_param0: slider.10
# conf.__widget__.double_param1: text
# conf.__widget__.str_param0: radio
# conf.__widget__.vector_param0: checkbox
# conf.__widget__.vector_param1: orderd_list

#
# Available GUI control constraint options [__constraints__]:
#
# conf.__constraints__.[parameter_name]:
#
# available constraints:
# - none:         blank
# - direct value: 100 (constant value)
# - range:        <, >, <=, >= can be used.
# - enumeration:  (enum0, enum1, ...)
# - array:        <constraints0>, ,constraints1>, ... for only array value
# - hash:         {key0: value0, key1:, value0, ...}
#
# available constraint formats (substitute variable name: "x"):
# - No constraint              : (blank)
# - Direct                     : 100 (read only)
# - 100 or over                : x >= 100
# - 100 or less                : x <= 100
# - Over 100                   : x > 100
# - Less 100                   : x < 0
# - 100 or over and 200 or less: 100 <= x <= 200
# - Over 100 and less 200      : 100 < x < 200
# - Enumeration                : (9600, 19200, 115200)
# - Array                      : x < 1, x < 10, x > 100
# - Hash                       : {key0: 100<x<200, key1: x>=100}
#
# examples:
# conf.__constraints__.int_param0: 0<=x<=150
# conf.__constraints__.int_param1: 0<=x<=1000
# conf.__constraints__.double_param0: 0<=x<=100
# conf.__constraints__.double_param1:
# conf.__constraints__.str_param0: (default,mode0,mode1)
# conf.__constraints__.vector_param0: (dog,monky,pheasant,cat)
# conf.__constraints__.vector_param1: (pita,gora,switch)

