============================================================
 aist-rtm-0.2.0 のソースからのインストール
============================================================

このドキュメントでは、aist-rtm-0.2.0 をソースからビルドしインストールする手順を
説明します。この手順に従ってインストールを行ってください。


------------------------------------------------------------
 UNIX系システムでのビルドとインストール
------------------------------------------------------------

1. 動作条件
aist-rtm-0.2.0 のインストールには下記のパッケージが必要です。各パッケージのイ
ンストールは、それぞれのドキュメントにしたがって行ってください。

[1] The ADAPTIVE Communication Environment (ACE) 5.4 以上
[2] boost 1.30 以上
[3] ORB
    現在のところ対応ORB実装は omniORB-4.0 以上のみとなっています。
[4] gcc は version3 以降が望ましい。gcc2.95.x でもコンパイル可能だが、
    オプションを指定する必要があります。(下記参照)

これらのパッケージが、標準のディレクトリ (/usr, /usr/local 等) 下にインストール
されていると、作業がrtmのコンパイル作業はやりやすくなります。

2. ソースコードの展開
まずソースコード aist-rtm-0.2.0.tar.gz を適当なディレクトリに展開します。

> tar xvzf aist-rtm-0.2.0.tar.gz
> cd aist-rtm-0．2．0

3. ビルド
rtm はパッケージのビルドに autoconf, automake を使用しています。ビルドの仕方
は、他の autoconf, automake を使用したパッケージと同様に行います。ただし、
ORBを指定するオプションは必須ですので必ず指定してください。

> ./configure [options]

./configureに与えることのできるオプションの一部を以下に示します。

<<使用するORB>>
※現在はomniORBしかサポートされていません。他のオプションは将来のために予約され
ています。

  --with-omniorb=dir
  --with-tao=dir
  --with-mico=dir
  --with-orbix=dir
  --with-orbacus=dir


<<生成するラッパーモジュールの種類の指定>>
スクリプト言語用のラッパーモジュールを生成します。現在のところ、Pythonのみサポ
ートしています。Python のバージョンは2.2以上でなければなりません。

  --with-python=dir

<<gcc3.x以前のコンパイラ（gcc2.95.x等）を使用する場合>>
バージョン3未満のgccではテンプレートのコンパイルで不具合が生じますので、
gcc2.95.xなどのコンパイラを使用する場合は、以下のオプションを指定してください。

  --with-gcc2

<<ACEinclude パス, lib パス>>
ACE が標準的なディレクトリにインスト一ルされていない場合以下のオプションでへッダ
とライブラリのディレクトリを指定して下さい。

  --with-ace-includes=dir
  --with-ace-lib=dir

ACE_wrppersが仮に "/tmp/src/ACE_wrappers" 以下にインストールされている場合

  --with-ace-include=/tmp/src/ACE_wrappers
  --with-ace-libs=/tmp/src/ACE_wrappers/ace

のように指定します。

<<その他>>
その他使用可能なオプションは

> ./configure --help

で参照して下さい。


4. make
configure が正常に終了したことを確認して下さい。正常に終了したらmakeします。

> make

インストールするためには少なくとも

  aist-rtm-0.2.0/rtm
  aist-rtm-0.2.0/rtm/idl
  aist-rtm-0.2.0/util/rtm-config
  aist-rtm-0.2.0/util/rtm-naming
  aist-rtm-0.2.0/util/rtc-template

以下のディレクトリが正常にビルドされている必要があります。ビルドが正常に終了した
ら、ヘッダファイル、ライブラリ、ユーティリティコマンド群をインストールします。

------------------------------------------------------------
> su
# make install
------------------------------------------------------------

5. サンプルのテスト
インストールが正常に終了したら、example/SimpleIO 以下のサンプルでテストします。

------------------------------------------------------------
> cd examples/SimpleIO/
> run.sh
------------------------------------------------------------

はじめに画面ktermが2つ開き、数秒後にもうひとつ開きます。3つ目のktermが開くまで、
必ず待ってください。
ウインドウタイトルに ConsoleIn とある方で数字を打ち込みます。入力する数字は、
short int に収まる範囲の数値を入力してください。数字を打ち込むと、ConsoleOut
とウインドウタイトルのある方から、入力したのと同じ数字と時刻 (sec:nsecのフォー
マットになっている)が現れます。
ここまでできれば、ライブラリ (libRTC.so) が正しくビルドされていることがわかりま
す。

6. コンポーネントテンプレートのテスト
次に、コンポーネントのテンプレートジェネレータを使用して、簡単なコンポーネントを
作成するテストを行います。テンプレートジェネレータ (rtc-template) を使用します。
コンポーネントを作成するデイレクトリ(任意のディレクトリで結構です。)を作成して、
そこでコンポーネントを作成しコンパイルしてみます。

------------------------------------------------------------
> cd 
> mkdir SampleComponent
> cd SampleComponent
------------------------------------------------------------

まずはhelpを見てみます。

------------------------------------------------------------
> rtc-template --help

Usage: rtc-template [OPTIONS]
Options:
    [--help]                              Print this help.
    [--c++]                               Generate C++ template code.
    [--python]                            Generate Python tempalte code.
    [--output[=output_file]]              Output base file name.
    [--module-name[=name]]                Your module name.
    [--module-desc[=description]]         Module description.
    [--module-version[=version]]          Module version.
    [--module-author[=author]]            Module author.
    [--module-category[=category]]        Module category.
    [--module-comp-type[=component_type]] Component type.
    [--module-act-type[=activity_type]]   Component's activity type.
    [--module-max-inst[=max_instance]]    Number of maximum instance.
    [--module-lang[=language]]            Language.
    [--module-inport[=PortName:Type]]     InPort's name and tyoe.
    [--module-outport[=PortName:Type]]    OutPort's name and type
       :
     中略
       :
Example:
    rtc-template --c++ --module-name=Sample --module-desc='Sample component' \
    --module-version=0.1 --module-author=DrSample --module-category=Generic \
    --module-comp-type=COMMUTATIVE --module-act-type=SPORADIC \
    --module-max-inst=10  \
    --module-inport=Ref:TimedFloat --module-inport=Sens:TimedFloat \
    --module-outport=Ctrl:TimedDouble --module-outport=Monitor:TimedShort
------------------------------------------------------------

rtc-template に作成したコンポーネントの設定を引数として渡すと、コンポーネントの
雛形を作成します。ここでは、help の表示の最後に現れた "Example:" 以下をコピーし
て試してみます。

------------------------------------------------------------
> rtc-template --c++ --module-name=Sample --module-desc='Sample component' \
    --module-version=0.1 --module-author=DrSample --module-category=Generic \
    --module-comp-type=COMMUTATIVE --module-act-type=SPORADIC \
    --module-max-inst=10  \
    --module-inport=Ref:TimedFloat --module-inport=Sens:TimedFloat \
    --module-outport=Ctrl:TimedDouble --module-outport=Monitor:TimedShort
Sample.h was generated.
Sample.cpp was generated.
SampleComp.cpp was generated.
Makefile.Sample was generated.
> ls
Makefile.Sample         Sample.h
Sample.cpp              SampleComp.cpp
------------------------------------------------------------

このように、コンポーネントのC++のコードとMakefileが作成されます。ここで、

> make -f Makefile.Sample
もしくは
> mv Makefile.Sample Makefile
> make

として make します。

------------------------------------------------------------
> make -f Makefile.Sample
rm -f Sample.o
g++ `rtm-config --cflags` -c -o Sample.o Sample.cpp
     :
    中略
     :
g++ `rtm-config --libs` -o SampleComp Sample.o SampleComp.o
rm -f Sample.so
g++ -shared `rtm-config --libs` -o Sample.so Sample.o
> ls
Makefile.Sample  Sample.h  Sample.so*   SampleComp.cpp
Sample.cpp       Sample.o  SampleComp*  SampleComp.o
------------------------------------------------------------
これで、ローダブルモジュール版のコンポーネント(Sample.so)と実行形式のコンポーネ
ント(SampleComp)が作成されました。
ここで、実行形式のコンポーネントを実行してみます。コンポーネントの実行にはコンフ
ィギュレーションファイル(通常は rtc.conf という名前)が必要です。
ここでは、簡易版のものをカレントディレクトリに作成します。

------------------------------------------------------------
> cat > rtc.conf
NameServer      現在のPCのホスト名:ポート番号
^D(Ctrl+D)
------------------------------------------------------------
ここで、仮にホスト名：rtm.or.jp ポート番号:6789 とします。

------------------------------------------------------------
> cat > rtc.conf
NameServer      rtm.or.jp:6789 (このように入力する)
^D(Ctrl+D)
> cat rtc.conf (確認)
NameServer      rtm.or.jp:6789
------------------------------------------------------------
次に、CORBA のネーミングサービスを起動します。CORBAのネーミングサービスは、

> rtm-naming ポート番号

で起動できますので、先ほどrtc.conf で指定したポート番号を指定して起動してください。

------------------------------------------------------------
> rtm-naming 6789
Starting omniORB omniNames: ichi:9999
n-ando@ichi:/tmp/SampleComponent> 
Fri Oct 29 17:12:51 2004:

Starting omniNames for the first time.
Wrote initial log file.
Read log file successfully.
Root context is IOR:010000002b00000049444c3a6f6d672e6f72672f436f734e616d696e672f
4e616d696e67436f6e746578744578743a312e300000010000000000000060000000010102000e00
00003135302e32392e39362e313638000f270b0000004e616d655365727669636500020000000000
0000080000000100000000545441010000001c000000010000000100010001000000010001050901
01000100000009010100
Checkpointing Phase 1: Prepare.
Checkpointing Phase 2: Commit.
Checkpointing completed.
------------------------------------------------------------
次に、コンポーネントを起動します。

------------------------------------------------------------
> SampleComp -f rtc.conf
------------------------------------------------------------
これで、コンポーネントが起動できました。この段階までできれば、rtm-0.2.0が正常に
インストールされたことになります。

具体的なコンポーネントの作成の仕方は、マニュアルを参照してください。



------------------------------------------------------------
 Windows系システムでのビルドとインストール
------------------------------------------------------------
将来的には対応する予定ですが、現在は未対応です。
