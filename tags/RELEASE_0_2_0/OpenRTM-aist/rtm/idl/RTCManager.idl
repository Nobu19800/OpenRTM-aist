// -*- IDL -*-
/*!
 * @file RTCManager.idl
 * @brief RTCManager interface
 * @date $Date: 2005-05-12 09:06:18 $
 * @author Noriaki Ando <n-ando@aist.go.jp>
 *
 * Copyright (C) 2003-2005
 *     Task-intelligence Research Group,
 *     Intelligent Systems Research Institute,
 *     National Institute of
 *         Advanced Industrial Science and Technology (AIST), Japan
 *     All rights reserved.
 *
 * $Id: RTCManager.idl,v 1.1.1.1 2005-05-12 09:06:18 n-ando Exp $
 */

/*
 * $Log: not supported by cvs2svn $
 *
 */

#ifndef __RTCManager_idl__
#define __RTCManager_idl__


#include "RTMBase.idl"
#include "RTComponent.idl"
#include "RTCBase.idl"


module RTM
{
  typedef sequence<string> ComponentFactoryList;

  struct RTCFactory
  {
	string name;
	string category;
  };
  typedef sequence<RTCFactory> RTCFactoryList;


  /*!
   * @if jp
   *
   * @class RTCManager
   *
   * @brief RTComponent インターフェース
   *
   * RTCManager はコンポーネントのロード、生成、破棄などのライフサイクルを管理
   * する。またコンポーネントに対して各種サービスを提供する。
   *
   * @else
   *
   * @class RTCManager
   *
   * @brief RTComponent manager interface.
   *
   * RTCManager manages life cycle of RTComponent for example, loading
   * component library, creating component, deleting component etc.
   * This manager also provide some services for RTComponents.
   *
   * @endif
   */
  interface RTCManager
  {
	/*!
	 * @if jp
	 * @brief モジュールのロード
	 *
	 * コンポーネントのモジュールをロードして初期化関数を実行する。
	 *
	 * @param pathname コンポーネントモジュールファイル名
	 * @param initfunc 初期化関数名
	 * 
	 * @else
	 * @brief Load module
	 *
     * Load shared library of a component by path name, and invoke initialize
	 * function.
	 *
	 * @param pathname Component module file name
	 * @param initfunc Initialize function name
	 *
	 * @endif
	 */  
	RtmRes load(in string pathname, in string initfunc);
	
	/*!
	 * @if jp
	 * @brief モジュールのアンロード
	 *
	 * コンポーネントのモジュールをアンロードする
	 *
	 * @param pathnae コンポーネントモジュールのファイル名
	 * 
	 * @else
	 * @brief Unload module
	 *
     * Unload shared library of a component module.
	 *
	 * @param pathname Component module file name
	 *
	 * @endif
	 */ 
	RtmRes unload(in string pathname);
	
	/*!
	 * @if jp
	 * @brief コンポーネントの生成
	 *
	 * コンポーネントのインスタンスを生成する
	 *
	 * @param module_name コンポーネントモジュール名
	 * @param category_name コンポーネントカテゴリ
	 * @param instance_name インスタンス名 (戻値)
	 * 
	 * @else
	 * @brief Create component instance
	 *
     * Create component instance with component module name.
	 *
	 * @param module_name Component module name
	 * @param category_name Component category name
	 * @param instance_name Instance name (return value)
	 *
	 * @endif
	 */  
	RTCBase create_component(in string module_name,
							 in string category_name,
							 out string instance_name);
	
	/*!
	 * @if jp
	 * @brief コンポーネントの削除
	 *
	 * コンポーネントのインスタンスを削除する
	 *
	 * @param comp_name インスタンス名
	 * 
	 * @else
	 * @brief Delete component instance
	 *
     * Delete component instance with instance name
	 *
	 * @param comp_name Instance name
	 *
	 * @endif
	 */ 
	RtmRes delete_component(in string instance_name,
							in string category_name);
	
	//============================================================
	// Get component factories and object references
	//============================================================
	/*!
	 * @if jp
	 * @brief コンポーネント Factory リストの取得
	 *
	 * コンポーネント Factory のリストを取得する
	 *
	 * @else
	 * @brief Get component factory list
	 *
     * Get component factory list.
	 *
	 * @endif
	 */  
	RTCFactoryList factory_list();
	
	/*!
	 * @if jp
	 * @brief コンポーネントリストの取得
	 *
	 * コンポーネントのリストを取得する
	 *
	 * @else
	 * @brief Get component list
	 *
     * Get component list.
	 *
	 * @endif
	 */  
	RTCBaseList component_list();
	
	
	/*!
	 * @if jp
	 * @brief 簡易インタプリタ
	 *
	 * マネージャの簡易インタプリタコマンドの実行
	 *
	 * @else
	 * @brief Simple interpreter
	 *
     * Execute simple interpreter.
	 *
	 * @endif
	 */
	RtmRes command(in string cmd, out string ret);
	
  };
  
}; // end of namespace RTM

#endif // __RTCManager_idl__