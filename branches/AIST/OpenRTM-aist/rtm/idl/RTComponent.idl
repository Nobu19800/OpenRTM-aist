// -*- IDL -*-
/*!
 * @file RTComponent.idl
 * @brief RTComponent インターフェース
 * @date $Date: 2005-05-12 09:06:18 $
 * @author Noriaki Ando <n-ando@aist.go.jp>
 *         Olivier Lemaire
 *
 * << Standard RT-Middleware Interface >>
 *
 * Copyright (C) 2003-2005
 *     Task-intelligence Research Group,
 *     Intelligent Systems Research Institute,
 *     National Institute of
 *         Advanced Industrial Science and Technology (AIST), Japan
 *
 *     Intelligent Mechanism Technology Laboratory,
 *     Technology Fusion Laboratory,
 *     Matsushita Electric Works, Ltd
 *
 *     All rights reserved.
 *
 * $Id: RTComponent.idl,v 1.1.1.1 2005-05-12 09:06:18 n-ando Exp $
 *
 */

/*
 * $Log: not supported by cvs2svn $
 *
 */

#ifndef __RTComponent_idl__
#define __RTComponent_idl__

#include "RTMBase.idl"
#include "RTCInPort.idl"
#include "RTCOutPort.idl"


module RTM {
  
  /*!
   * @if jp
   *
   * @class RTComponent
   *
   * @brief RTComponent インターフェース
   *
   * @else
   *
   * @class RTComponent
   *
   * @brief RTComponent interface
   *
   * @endif
   */
  interface RTComponent
  //	: NamedObject, PropertySet
  {
	/*!
	 * @if jp
	 * @brief コンポーネントのインスタンスID
	 * @else
	 * @brief Instance ID
	 * @endif
	 */
	readonly attribute string instance_id;
	
	/*!
	 * @if jp
	 * @brief コンポーネントのインプリメンテーションID
	 * @else
	 * @brief Implementation ID
	 * @endif
	 */
	readonly attribute string implementation_id;
	
	/*!
	 * @if jp
	 * @brief コンポーネントの概要
	 * @else
	 * @brief Description of a component
	 * @endif
	 */
	readonly attribute string description;
	
	/*!
	 * @if jp
	 * @brief コンポーネントのバージョン
	 * @else
	 * @brief Version of a component
	 * @endif
	 */
	readonly attribute string version;
	
	/*!
	 * @if jp
	 * @brief コンポーネントの作成者
	 * @else
	 * @brief Component maker
	 * @endif
	 */
	readonly attribute string maker;
	
	/*!
	 * @if jp
	 * @brief コンポーネントのカテゴリ
	 * @else
	 * @brief Component category
	 * @endif
	 */
	readonly attribute string category;
	
	/*!
	 * @if jp
	 * @brief コンポーネントのアクティビティ状態
	 * @else
	 * @brief Component activity state
	 * @endif
	 */
	typedef short ComponentState;
	
	/*------------------------------------------------------------
	 * Component state definition
	 *------------------------------------------------------------*/ 
	//! UNKNOWN state
    const ComponentState RTC_UNKNOWN        = 0;
	//! BORN state
    const ComponentState RTC_BORN           = 1;
	//! INITIALIZING state
	const ComponentState RTC_INITIALIZING	= 2;
	//! READY state
    const ComponentState RTC_READY          = 3;
	//! STARTING state
    const ComponentState RTC_STARTING		= 4;
	//! ACTIVE state
    const ComponentState RTC_ACTIVE         = 5;
	//! STOPPING state
    const ComponentState RTC_STOPPING		= 6;
	//! ABORTING state
    const ComponentState RTC_ABORTING		= 7;
	//! ERROR state
    const ComponentState RTC_ERROR          = 8;
	//! FATAL_ERROR state
    const ComponentState RTC_FATAL_ERROR    = 9;
	//! EXITING state
    const ComponentState RTC_EXITING        = 10;
	
	/*!
	 * @if jp
	 * @brief 不正状態遷移例外
	 * @else
	 * @brief Illegal transition exception
	 * @endif
	 */
	exception IllegalTransition {};
	
	//------------------------------------------------------------
	// Transition operation of component activity state
	//------------------------------------------------------------
	/*!
	 * @if jp
	 * 
	 * @brief コンポーネントのアクティブ化
	 *
	 * コンポーネントの状態を READY から ACTIVE に遷移させる。
	 * このオペレーションを発行するとき、コンポーネントは READY 状態でなければ
	 * ならない。他の状態の場合には IllegalTransition 例外が発生する。
	 *
	 * @else
	 *
	 * @brief Activate this components' activity
	 * 
	 * @endif
	 */
	RtmRes rtc_start() raises (IllegalTransition);
	
	/*!
	 * @if jp
	 * 
	 * @brief コンポーネントの非アクティブ化
	 *
	 * コンポーネントの状態を ACTIVE から READY に遷移させる。
	 * このオペレーションを発行するとき、コンポーネントは ACTIVE 状態でなければ
	 * ならない。他の状態の場合には IllegalTransition 例外が発生する。
	 *
	 * @else
	 *
	 * @brief Stop this component's activity
	 * 
	 * @endif
	 */
	RtmRes rtc_stop() raises (IllegalTransition);
	
	/*!
	 * @if jp
	 * 
	 * @brief コンポーネントのリセット
	 *
	 * コンポーネントの状態を ERROR から INITIALIZE に遷移させる。
	 * INITIALIZE 後エラーがなければすぐに READY 状態に遷移する。
	 * このオペレーションを発行するとき、コンポーネントは ERROR 状態でなければ
	 * ならない。他の状態の場合には IllegalTransition 例外が発生する。
	 *
	 * @else
	 *
	 * @brief Go to init() state from error() state
	 * 
	 * @endif
	 */
	RtmRes rtc_reset() raises (IllegalTransition);
	
	/*!
	 * @if jp
	 * 
	 * @brief コンポーネントのリセット
	 *
	 * コンポーネントの状態を EXITING に遷移させる。
	 * EXITING 状態に遷移したコンポーネントは二度と復帰することなく終了する。
	 *
	 * @else
	 *
	 * @brief Go to term() state from anywhere
	 * 
	 * @endif
	 */
	RtmRes rtc_exit() raises (IllegalTransition);
	
	/*!
	 * @if jp
	 * 
	 * @brief コンポーネントの強制終了
	 *
	 * FATAL_ERROR 状態のコンポーネントを EXITING に遷移させる。
	 * EXITING 状態に遷移したコンポーネントは二度と復帰することなく終了する。
	 *
	 * @else
	 *
	 * @brief Go to exiting() state from active() state 
	 * 
	 * @endif
	 */
	RtmRes rtc_kill();
	
	
	//------------------------------------------------------------
	// Main activity
	//------------------------------------------------------------
	/*!
	 * @if jp
	 * 
	 * @brief メインアクティビティのメソッド
	 *
	 * コンポーネントのアクティビティの本体はこのメソッドを周期実行することに
	 * より処理される。単体のコンポーネントでは内部的なスレッドによりこのメソ
	 * ッドを周期呼出することで処理を行っている。
	 * スレッドを停止させ、外部からこのオペレーションを呼び出すことにより、任
	 * 意のタイミングでアクティビティを実行することも出来る。
	 *
	 * @else
	 *
	 * @brief Main activity function. 
	 *
	 * Called from activity thread periodically.
	 * 
	 * @endif
	 */
	RtmRes rtc_worker();
	
	
	//------------------------------------------------------------
	// Status handling
	//------------------------------------------------------------
	/*!
	 * @if jp
	 * @brief アクティビティステータスのOutPortの取得
	 *
	 * アクティビティステータスのOutPortのオブジェクトリファレンスを取得する。
	 *
	 * @else
	 *
	 * @brief Get activity status OutPort
	 *
	 * @endif
	 */
	readonly attribute OutPort rtc_state;  // ComponentState
	
	//============================================================
	// InPorts and OutPorts
	//============================================================
	/*!
	 * @if jp
	 * @brief 不正な名前指定例外
	 *
	 * 名前指定でInPort/OutPort等を取得するとき、該当する名前の
	 * オブジェクトがなかった。
	 *
	 * @else
	 *
	 * @brief No such name exception
	 *
	 * @endif
	 */
	exception NoSuchName { string name; };
	
	//------------------------------------------------------------
	// Get inports and outport object reference
	//------------------------------------------------------------
	/*!
	 * @if jp
	 * @brief InPortList の取得
	 *
	 * InPort のオブジェクトリファレンスのリストを取得する。
	 *
	 * @else
	 *
	 * @brief Return input port object reference list
	 *
	 * @endif
	 */
	readonly attribute InPortList inports;
	
	/*!
	 * @if jp
	 * @brief InPort の取得
	 *
	 * InPort のオブジェクトリファレンスを取得する。
	 *
	 * @param name InPort 名
	 *
	 * @else
	 *
	 * @brief Return input port object reference
	 *
	 * @param name InPort name
	 *
	 * @endif
	 */
	InPort get_inport(in string name) raises (NoSuchName);
	
	/*!
	 * @if jp
	 * @brief OutPortList の取得
	 *
	 * OutPort のオブジェクトリファレンスのリストを取得する。
	 *
	 * @else
	 *
	 * @brief Return output port object reference list
	 *
	 * @endif
	 */
	readonly attribute OutPortList outports;
	
	/*!
	 * @if jp
	 * @brief OutPort の取得
	 *
	 * OutPort のオブジェクトリファレンスを取得する。
	 *
	 * @param name OutPort 名
	 *
	 * @else
	 *
	 * @brief Return output port object reference
	 *
	 * @param name OutPort name
	 *
	 * @endif
	 */
	OutPort get_outport(in string name) raises (NoSuchName);
	
	//! Return connector port object reference list
	//	readonly attribute ConnectorList connectors;
	//	OutPort get_connector(in string name) raises (NoSuchName);
	
	
	//============================================================
	// Component profile and configuration
	//============================================================
	//	readonly attribute PropertySet rtc_settings;
	
  };
  
  /*!
   * @if jp
   * @brief RTComponent リスト
   * @else
   * @brief RTComponent list
   * @endif
   */
  typedef sequence<RTComponent> RTComponentList;
  
};  // end of module RTM

#endif // __RTComponent_idl__
