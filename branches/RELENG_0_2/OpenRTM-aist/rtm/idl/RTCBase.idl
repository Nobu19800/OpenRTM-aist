// -*- IDL -*-
/*!
 * @file RTCBase.idl
 * @brief RTCBase interface
 * @author Noriaki Ando <n-ando@aist.go.jp>
 *
 * Copyright (C) 2003-2005
 *     Task-intelligence Research Group,
 *     Intelligent Systems Research Institute,
 *     National Institute of
 *         Advanced Industrial Science and Technology (AIST), Japan
 *     All rights reserved.
 *
 * $Id: RTCBase.idl,v 1.1.1.1 2005-05-12 09:06:18 n-ando Exp $
 */

/*
 * $Log: not supported by cvs2svn $
 *
 */


#ifndef __RTCBase_idl__
#define __RTCBase_idl__

#include "RTComponent.idl"
#include "RTCProfile.idl"

module RTM {
  
  interface RTCBase;
  
  /*!
   * @if jp
   * @brief RTCBase リスト
   * @else
   * @brief RTCbase list
   * @endif
   */
  typedef sequence<RTCBase> RTCBaseList;
  
  /*!
   * @if jp
   *
   * @class RTCBase
   *
   * @brief RTCBase インターフェース
   * 
   * RTComponent インターフェースを継承し、主に複合コンポーネント化に必要な
   * メソッドを追加したインターフェース。
   * コンポーネントアクティビティ状態に対応するメソッド、アクティビティスレッド
   * の制御、子コンポーネントの追加、削除、置換を行うオペレーションが追加され
   * ている.
   *
   * @else
   *
   * @class RTCBase
   *
   * @brief RTCBase interface
   *
   * @endif
   */
  interface RTCBase
	: RTComponent
  {
	
	/*!
	 * @if jp
	 * @brief entry: ready() メソッド
	 *
	 * READY 状態へ進入するときに1度だけ呼び出されるメソッド。
	 *
	 * @else
	 *
	 * @brief entry: ready() method.
	 *
	 * This method will be called once when component enter
	 * to Ready state.
	 *
	 * @endif
	 */
	RtmRes rtc_ready_entry();
	
	/*!
	 * @if jp
	 * @brief do: ready() メソッド.
	 *
	 * READY 状態にいる間周期実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief do: ready() method.
	 *
	 * This method will be called repeatedly when component state is Ready.
	 *
	 * @endif
	 */
	RtmRes rtc_ready_do();
	
	/*!
	 * @if jp
	 * @brief exit: ready() メソッド.
	 *
	 * READY 状態から出るときに1度だけ実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief exit: ready() method.
	 *
	 * This method will be called once when component exit from Ready state.
	 *
	 * @endif
	 */
	RtmRes rtc_ready_exit();
	
	/*!
	 * @if jp
	 * @brief entry: active() メソッド.
	 *
	 * ACTIVE 状態に進入するときに1度だけ実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief entry: active() method.
	 *
	 * This method will be called once when component enter to Active state.
	 *
	 * @endif
	 */
	RtmRes rtc_active_entry();
	
	/*!
	 * @if jp
	 * @brief do: active() メソッド.
	 *
	 * ACTIVE 状態に居る間周期実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief do: active() method.
	 *
	 * This method will be called repeatedly when component state is Active.
	 *
	 * @endif
	 */
	RtmRes rtc_active_do();
	
	/*!
	 * @if jp
	 * @brief exit: active() メソッド.
	 *
	 * ACTIVE 状態から出るときに1度だけ実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief exit: active() method.
	 *
	 * This method will be called once when component exit from Active state.
	 *
	 * @endif
	 */
	RtmRes rtc_active_exit();
	
	/*!
	 * @if jp
	 * @brief entry: error() メソッド
	 *
	 * ERROR 状態へ進入するときに1度だけ呼び出されるメソッド。
	 *
	 * @else
	 *
	 * @brief entry: error() method.
	 *
	 * This method will be called once when component enter to Error state.
	 *
	 * @endif
	 */
	RtmRes rtc_error_entry();
	
	/*!
	 * @if jp
	 * @brief do: error() メソッド.
	 *
	 * ERROR 状態にいる間周期実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief do: ready() method.
	 *
	 * This method will be called repeatedly when component state is Error.
	 *
	 * @endif
	 */
	RtmRes rtc_error_do();
	
	/*!
	 * @if jp
	 * @brief exit: error() メソッド.
	 *
	 * ERROR 状態から出るときに1度だけ実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief exit: error() method.
	 *
	 * This method will be called once when component exit from Error state.
	 *
	 * @endif
	 */
	RtmRes rtc_error_exit();
	
	/*!
	 * @if jp
	 * @brief entry: fatal() メソッド
	 *
	 * FATAL_ERROR 状態へ進入するときに1度だけ呼び出されるメソッド。
	 *
	 * @else
	 *
	 * @brief entry: fatal() method.
	 *
	 * This method will be called once when component enter to FATAL_ERROR
	 * state.
	 *
	 * @endif
	 */
	RtmRes rtc_fatal_entry();
	
	/*!
	 * @if jp
	 * @brief do: fatal() メソッド.
	 *
	 * FATAL_ERROR 状態にいる間周期実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief do: fatal() method.
	 *
	 * This method will be called repeatedly when component state is
	 * FATAL_ERROR state.
	 *
	 * @endif
	 */
	RtmRes rtc_fatal_do();
	
	/*!
	 * @if jp
	 * @brief exit: fatal() メソッド.
	 *
	 * READY 状態から出るときに1度だけ実行されるメソッド。
	 *
	 * @else
	 *
	 * @brief exit: fatal() method.
	 *
	 * This method will be called once when component exit from FATAL_ERROR
	 * state.
	 *
	 * @endif
	 */
	RtmRes rtc_fatal_exit();
	
	/*!
	 * @if jp
	 * @brief entry: init() メソッド
	 *
	 * INITIALIZING 状態へ進入するときに1度だけ呼び出されるメソッド。
	 * エラーがなければ READY 状態へ遷移する。
	 * 戻り値が RTM_ERR で ERROR 状態へ、 RTM_FATALERR で FATAL_ERROR 状態へ
	 * 遷移する。
	 *
	 * @else
	 *
	 * @brief entry: ready() method.
	 *
	 * This method will be called and move to Ready/Error state immediately.
	 *
	 * @endif
	 */
	RtmRes rtc_init_entry();
	
	/*!
	 * @if jp
	 * @brief entry: starting() メソッド
	 *
	 * STARTING 状態へ進入するときに1度だけ呼び出されるメソッド。
	 * エラーがなければ ACTIVE 状態へ遷移する。
	 * 戻り値が RTM_ERR で ERROR 状態へ、 RTM_FATALERR で FATAL_ERROR 状態へ
	 * 遷移する。
	 *
	 * @else
	 *
	 * @brief entry: starting() method.
	 *
	 * This method will be called and move to Active state immediately.
	 *
	 * @endif
	 */
	RtmRes rtc_starting_entry();
	
	/*!
	 * @if jp
	 * @brief entry: stopping() メソッド
	 *
	 * STOPPING 状態へ進入するときに1度だけ呼び出されるメソッド。
	 * エラーがなければ READY 状態へ遷移する。
	 * 戻り値が RTM_ERR で ERROR 状態へ、 RTM_FATALERR で FATAL_ERROR 状態へ
	 * 遷移する。
	 *
	 * @else
	 *
	 * @brief entry: stopping() method.
	 *
	 * This method will be called and move to Ready state immediately.
	 *
	 * @endif
	 */
	RtmRes rtc_stopping_entry();
	
	/*!
	 * @if jp
	 * @brief entry: aborting() メソッド
	 *
	 * ABORTING 状態へ進入するときに1度だけ呼び出されるメソッド。
	 * エラーがなければ READY 状態へ遷移する。
	 * 戻り値が RTM_ERR で ERROR 状態へ、 RTM_FATALERR で FATAL_ERROR 状態へ
	 * 遷移する。
	 *
	 * @else
	 *
	 * @brief entry: aborting() method.
	 *
	 * This method will be called and move to Error state immediately.
	 *
	 * @endif
	 */
	RtmRes rtc_aborting_entry();
	
	/*!
	 * @if jp
	 * @brief entry: exiting() メソッド
	 *
	 * EXITING 状態へ進入するときに1度だけ呼び出されるメソッド。
	 * エラーがなければ READY 状態へ遷移する。
	 * 戻り値が RTM_ERR で ERROR 状態へ、 RTM_FATALERR で FATAL_ERROR 状態へ
	 * 遷移する。
	 *
	 * @else
	 *
	 * @brief entry: exiting() method.
	 *
	 * This method will be called and terminate component.
	 *
	 * @endif
	 */
	RtmRes rtc_exiting_entry();
	
	//============================================================
	// Composit component interface
	//============================================================
	/*!
	 * @if jp
	 * @brief アクティビティスレッドのスタート
	 *
	 * コンポーネントアクティビティの内部スレッドをスタートさせる
	 *
	 * @else
	 *
	 * @brief Start activity internal thread
	 *
	 * @endif
	 */
	RtmRes rtc_stop_thread();
	
	/*!
	 * @if jp
	 * @brief アクティビティスレッドのストップ
	 *
	 * コンポーネントアクティビティの内部スレッドをストップさせる
	 *
	 * @else
	 *
	 * @brief Stop activity internal thread
	 *
	 * @endif
	 */
	RtmRes rtc_start_thread();
	
	/*!
	 * @if jp
	 * @brief 親コンポーネントをセットする
	 *
	 * 親コンポーネントのオブジェクトリファレンスをセットする。
	 *
	 * @else
	 *
	 * @brief Set parent component
	 *
	 * @endif
	 */
	RtmRes rtc_set_parent(in RTCBase comp);
	
	/*!
	 * @if jp
	 * @brief 子コンポーネントを追加する
	 *
	 * 子コンポーネントのオブジェクトリファレンスをセットする。
	 * 単体コンポーネントにおいてこのメソッドは未使用のため、RTM_ERR を返す。
	 *
	 * @else
	 *
	 * @brief Set child component
	 *
	 * @endif
	 */
	RtmRes rtc_add_component(in RTCBase comp);
	
	/*!
	 * @if jp
	 * @brief 子コンポーネントを削除する
	 *
	 * 子コンポーネントのオブジェクトリファレンスを削除する。
	 * 単体コンポーネントにおいてこのメソッドは未使用のため、RTM_ERR を返す。
	 *
	 * @else
	 *
	 * @brief Delete child component
	 *
	 * @endif
	 */
	RtmRes rtc_delete_component(in RTCBase comp);
	
	
	/*!
	 * @if jp
	 * @brief 子コンポーネントの順序を入れ替える
	 *
	 * 2つの子コンポーネントをオブジェクトリファレンスを使用して順序を入れ替え
	 * る。
	 * 単体コンポーネントにおいてこのメソッドは未使用のため、RTM_ERR を返す。
	 *
	 * @else
	 *
	 * @brief Replace two child components
	 *
	 * @endif
	 */
	RtmRes rtc_replace_component(in RTCBase comp1, in RTCBase comp2);
	
	/*!
	 * @if jp
	 * @brief 子コンポーネントの順序を入れ替える
	 *
	 * 2つの子コンポーネントの順序をコンポーネント名を指定して入れ替える。
	 * 単体コンポーネントにおいてこのメソッドは未使用のため、RTM_ERR を返す。
	 *
	 * @else
	 *
	 * @brief Replace two child components
	 *
	 * @endif
	 */
	RtmRes rtc_replace_component_by_name(in string name1, in string name2);
	
	/*!
	 * @if jp
	 * @brief 子コンポーネントをリストとして取得する。
	 *
	 * 子コンポーネントのリストを取得する。
	 * 単体コンポーネントにおいては自分自身オブジェクトリファレンスを返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RTCBaseList rtc_components();
	
	/*!
	 * @if jp
	 * @brief 子コンポーネントを名前を指定して取得
	 *
	 * 子コンポーネントを名前を指定してそのオブジェクトリファレンスを取得する。
	 * 単体コンポーネントにおいては自分自身オブジェクトリファレンスを返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RTCBase rtc_get_component(in string name);
	
	/*!
	 * @if jp
	 * @brief InPortをアタッチする
	 *
	 * 子コンポーネントのInPortをこのコンポーネントのInPortにアタッチする。
	 * 単体コンポーネントにおいては自分自身オブジェクトリファレンスを返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RtmRes rtc_attach_inport(in InPort in_port);
	
	/*!
	 * @if jp
	 * @brief InPortをアタッチする
	 *
	 * 子コンポーネントのInPort名を指定してコンポーネントのInPortにアタッチ
	 * する。
	 * 単体コンポーネントにおいては自分自身オブジェクトリファレンスを返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RtmRes rtc_attach_inport_by_name(in RTCBase comp, in string name);
	
	/*!
	 * @if jp
	 * @brief InPortをデタッチする
	 *
	 * 子コンポーネントのInPortをこのコンポーネントのInPortからデタッチする。
	 * 単体コンポーネントにおいては RTM_ERR を返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RtmRes rtc_detatch_inport(in InPort in_port);
	
	/*!
	 * @if jp
	 * @brief InPortをデタッチする
	 *
	 * 子コンポーネントのInPortを名前を指定してこのコンポーネントのInPortから
	 * デタッチする。
	 * 単体コンポーネントにおいては RTM_ERR を返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RtmRes rtc_detatch_inport_by_name(in string name);
	
	/*!
	 * @if jp
	 * @brief OutPortをアタッチする
	 *
	 * 子コンポーネントのOutPortをこのコンポーネントのOutPortにアタッチする。
	 * 単体コンポーネントにおいては自分自身オブジェクトリファレンスを返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RtmRes rtc_attach_outport(in OutPort out_port);
	
	
	/*!
	 * @if jp
	 * @brief OutPortをアタッチする
	 *
	 * 子コンポーネントのOutPort名を指定してコンポーネントのInPortにアタッチ
	 * する。
	 * 単体コンポーネントにおいては自分自身オブジェクトリファレンスを返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RtmRes rtc_attach_outport_by_name(in RTCBase comp, in string name);
	
	/*!
	 * @if jp
	 * @brief OutPortをデタッチする
	 *
	 * 子コンポーネントのOutPortをこのコンポーネントのOutPortからデタッチする。
	 * 単体コンポーネントにおいては RTM_ERR を返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RtmRes rtc_detatch_outport(in OutPort out_port);
	
	/*!
	 * @if jp
	 * @brief OutPortをデタッチする
	 *
	 * 子コンポーネントのOutPortを名前を指定してこのコンポーネントのOutPortから
	 * デタッチする。
	 * 単体コンポーネントにおいては RTM_ERR を返す。
	 *
	 * @else
	 *
	 * @brief Get child components list
	 *
	 * @endif
	 */
	RtmRes rtc_detatch_outport_by_name(in string name);
	
	//------------------------------------------------------------
	// Component's profile
	//------------------------------------------------------------
	/*!
	 * @if jp
	 * @brief コンポーネントのプロファイル構造体
	 * @else
	 * @brief RTComponent's profile
	 * @endif
	 */
	readonly attribute RTCProfile profile;
	
	//------------------------------------------------------------
	// Component's profile
	//------------------------------------------------------------
	//	readonly attribute RTCConfiguration configuration;
  };
};
#endif // end of __RTCBase_idl__
