// -*- IDL -*-
/*!
 * @file RTCSubscription.idl
 * @brief Subscription profile structure
 * @date $Date: 2005-05-27 07:40:47 $
 * @author Noriaki Ando <n-ando@aist.go.jp>
 *
 * << Standard RT-Middleware Interface : experimental>>
 *
 * Copyright (C) 2005
 *     Task-intelligence Research Group,
 *     Intelligent Systems Research Institute,
 *     National Institute of
 *         Advanced Industrial Science and Technology (AIST), Japan
 *     All rights reserved.
 *
 * $Id: RTCSubscription.idl,v 1.1 2005-05-27 07:40:47 n-ando Exp $
 *
 */

/*
 * $Log: not supported by cvs2svn $
 *
 *
 */

#ifndef __RTCSubscriptionProfile_idl__
#define __RTCSubscriptionProfile_idl__

#include "RTMBase.idl"

module RTM
{
  interface InPort;
  interface OutPort;

  /*!
   * @if jp
   *
   * @brief Subscription ID
   *
   * サブスクライブに対してユニークなID。通常はUUIDを用いる。
   *
   * @else
   *
   * @brief Subscription ID
   *
   * Unique ID for subscription. Usually UUID is used.
   *
   * @endif
   */
  typedef string SubscriptionID;

  /*!
   * @if jp
   * @brief SubscriptionType 定義
   * OutPort に対する Subscription 型。OPS は OutPort Subscription を意味する。
   * @else
   * @brief SubscriptionType definition
   * Subscription type to OutPort. OPS stands for OutPort Subscription.
   * @endif
   */
  typedef short SubscriptionType;
  
  
  /*!
   * @if jp
   * @brief 一度だけデータを取得する。
   *
   * データを非同期的に1度だけ取得する。その際クライアントはサーバントが
   * 取得している最中ブロックされない。
   * 最近のデータを取得するのか、最新のデータを取得するのかをオプションで
   * 指定する必要があるかもしれない。
   *
   * @else
   *
   * @brief Subscribe Once.
   *
   * Get only one data asynchronously present, this is to ensure
   * that the client will not block while the servant is acquiring
   * the data (may be we need one more option to specify if we want
   * the data now or the next new data) 
   *
   * @endif
   */
  const SubscriptionType OPS_ONCE = 0;
  
  /*!
   * @if jp
   * @brief 一定周期でデータ送信
   *
   * 指定した周期でデータ送信をサブスクライバに送信する。
   *
   * @else
   *
   * @brief Get data periodic
   *
   * Get data at regular pace
   * @endif
   */
  const SubscriptionType OPS_PERIODIC = 1;
  
  /*!
   * @if jp
   * @brief データ更新時にデータ送信
   *
   * OutPortのデータが更新され次第すぐにサブスクライバにデータが送信される。
   *
   * @else
   *
   * @brief Get data if updated
   *
   * Get data every time a new data is available in outport
   *
   * @endif
   */
  const SubscriptionType OPS_NEW = 2;
  
  /*!
   * @if jp
   * @brief トリガによりデータ送信
   *
   * 予め設定されたトリガによりトリガが発生したときにデータが送信される。
   *
   * @else
   *
   * @brief Get data if triggered
   *
   * Get data every time a condition is reached (like "is > 2.0",
   * we need to define a condition definition language but it's
   * not yet urgent)
   *
   * @endif
   */
  const SubscriptionType OPS_TRIGGERED = 3;
  
  /*!
   * @if jp
   * @brief 一定周期でデータ更新時のみ送信
   *
   * データ更新時のみ、予め設定された周期のタイミングでデータが送信される。
   * 周期がΔt [s] に設定されたとき、データ送信のタイミングは、データが
   * 更新されてから最も近い nΔt [s] に行われる。
   *
   * @else
   *
   * @brief Get data periodic if updated
   *
   * Get data at regular pace only if a new data is available
   * in the outport : especially useful for analog data :
   * client leads synchro
   *
   * @endif
   */
  const SubscriptionType OSP_PERIODIC_NEW = 4;
  
  /*!
   * @if jp
   * @brief データ更新時に送信・一定周期で送信
   *
   * データ更新時にすぐにデータは送信されるが、それ以降はデータが更新され
   * 続ける限りは一定周期で送信で送信される。
   *
   * @else
   *
   * @brief Get data if updated and periodic
   *
   * Get data every time a new data is available in outport
   * but not faster than a given pace : server leads synchro
   *
   * @endif
   */
  const SubscriptionType OPS_NEW_PERIODIC = 5;
  
  /*!
   * @if jp
   * @brief 一定周期でトリガ時のみ送信
   *
   * OPS_PERIODIC_NEW の送信条件がトリガに変わるだけで、そのほかの動作は
   * OPS_PERIODIC_NEW と同じになる。
   *
   * @else
   *
   * @brief Get data periodic if triggerd
   *
   * Same as OSP_PERIODIC_NEW but the "new" condition is
   * replaced by the "trigger" condition
   *
   * @endif
   */
  const SubscriptionType OPS_PERIODIC_TRIGGERED = 6;
  
  /*!
   * @if jp
   * @brief トリガ時に送信・一定周期で送信
   *
   * OPS_TRIGGERRED_PERIODIC の送信条件がトリガに変わるだけで、そのほかの動作は
   * OPS_TRIGGERRED_PERIODIC と同じになる。
   *
   * @else
   *
   * @brief Get data if triggered and periodic
   *
   * Same as OSP_TRIGGERED_PERIODIC but the "new" condition
   * is replaced by the "trigger" condition
   *
   * @endif
   */
  const SubscriptionType OPS_TRIGGERRED_PERIODIC = 7;
  
  
  /*!
   * @if jp
   * @brief SubscriberProfile
   *
   * サブスクライブに関するサブスクライバのプロファイルを定義。
   *
   * @else
   *
   * @brief SubscriberProfile
   *
   * Structure definition of subscriber profile.
   *
   * @endif
   */
  struct SubscriptionProfile
  {
	
	/*!
	 * @if jp
	 * @brief サブスクライブ型
	 *
	 * サブスクライブに関するサブスクライバのプロファイルを定義。
	 * OPS_ONCE OPS_PERIODIC OPS_NEW OPS_TRIGGERED OSP_PERIODIC_NEW
	 * OPS_NEW_PERIODIC OPS_PERIODIC_TRIGGERED OPS_TRIGGERRED_PERIODIC
	 * のいずれかを指定。
	 *
	 * @else
	 *
	 * @brief Subscription
	 *
	 * Structure definition of subscriber profile.
	 * Set one of the following subscription type.
	 * OPS_ONCE OPS_PERIODIC OPS_NEW OPS_TRIGGERED OSP_PERIODIC_NEW
	 * OPS_NEW_PERIODIC OPS_PERIODIC_TRIGGERED OPS_TRIGGERRED_PERIODIC
	 *
	 * @endif
	 */
	SubscriptionType subscription_type;
	
	/*!
	 * @if jp
	 * @brief サブスクリプションID
	 * @else
	 * @brief Subscription ID
	 * @endif
	 */
	SubscriptionID id;

	/*!
	 * @if jp
	 * @brief 当該サブスクリプションInPort
	 * @else
	 * @brief InPort of this Subscription
	 * @endif
	 */
	InPort in_port;

	/*!
	 * @if jp
	 * @brief 当該サブスクリプションInPort
	 * @else
	 * @brief InPort of this Subscription
	 * @endif
	 */
	OutPort out_port;

	/*!
	 * @if jp
	 * @brief イベント型サブスクライブフラグ
	 * @else
	 * @brief Flag of event type eubscription
	 * @endif
	 */
	boolean event_base;
	
	/*!
	 * @if jp
	 * @brief サブスクライブプロパティ
	 * @else
	 * @brief Subscriber properties
	 * @endif
	 */
	
	NVList properties;
  };

  /*!
   * @if jp
   * @brief SubscriberProfile のリスト
   * @else
   * @brief SubscriberProfile list
   * @endif
   */
  typedef sequence<SubscriptionProfile> SubscriptionList;


};
#endif // __RTCSubscriptionProfile_idl__
