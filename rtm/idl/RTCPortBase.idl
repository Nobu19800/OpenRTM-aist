// -*- IDL -*-
/*!
 * @file RTCPortBase.idl
 * @brief PortBase interface
 * @date $Date: 2005-05-27 07:40:47 $
 * @author Noriaki Ando <n-ando@aist.go.jp>
 *
 * << Standard RT-Middleware Interface : experimental>>
 *
 * Copyright (C) 2005
 *     Task-intelligence Research Group,
 *     Intelligent Systems Research Institute,
 *     National Institute of
 *         Advanced Industrial Science and Technology (AIST), Japan
 *     All rights reserved.
 *
 * $Id: RTCPortBase.idl,v 1.1 2005-05-27 07:40:47 n-ando Exp $
 *
 */

/*
 * $Log: not supported by cvs2svn $
 *
 *
 */

#ifndef __RTCPortBase_idl__
#define __RTCPortBase_idl__

#include "RTCSubscription.idl"

module RTM
{
  /*!
   * @if jp
   * @brief InPort/OutPort のプロファイル構造体
   * @else
   * @brief A structure of InPort/OutPort profile
   * @endif
   */
  struct PortProfile
  {
	/*!
	 * @if jp
	 * @brief InPort/OutPort の名前
	 * @else
	 * @brief Name of InPort/OutPort
	 * @endif
	 */
    string name;
	
	/*!
	 * @if jp
	 *
	 * @brief InPort/OutPort のデータ型
	 * 
	 * InPort/OutPort のデータ型の CORBA TypeCode を格納する。
	 *
	 * @else
	 *
	 * @brief DataType of InPort/OutPort
	 *
	 * CORBA TypeCode of the data type is stored.
	 *
	 * @endif
	 */
    CORBA::TypeCode port_type;
	
	/*!
	 * @if jp
	 * @brief InPort/OutPort のプロパティリスト
	 * @else
	 * @brief Property list of InPort/OutPort
	 * @endif
	 */
	NVList properties;
  };

  /*!
   * @if jp
   * @brief InPort/OutPort のプロファイルのリスト
   * @else
   * @brief InPort/OutPort profile list
   * @endif
   */
  typedef sequence<PortProfile> PortProfileList;



  interface PortBase
  {
	/*!
	 * @if jp
	 * @brief 切断例外
	 *
	 * すでに切断しているポートから入力を受け付けたとき発生
	 *
	 * @else
	 *
	 * @brief Disconnected exception
	 *
	 * If the OutPort is already disconnected, this exception will raise.
	 *
	 * @endif
	 */
	exception Disconnected{};
	/*!
	 * @if jp
	 * @brief 切断例外
	 *
	 * すでに切断しているポートから入力を受け付けたとき発生
	 *
	 * @else
	 *
	 * @brief Disconnected exception
	 *
	 * If the OutPort is already disconnected, this exception will raise.
	 *
	 * @endif
	 */
	exception NoSubscription
	{
	  SubscriptionID id;
	};
	exception InvalidSubscription
	{
	};

	/*!
	 * @if jp
	 * @brief Subscribe する
	 * @else
	 * @brief Subscribe this Port
	 * @endif
	 */
    RtmRes subscribe(inout SubscriptionProfile subs)
	  raises (InvalidSubscription);
	
	/*!
	 * @if jp
	 * @brief Subscribe したことを知らせる
	 * @else
	 * @brief Notifiy subscription
	 * @endif
	 */
	RtmRes notify_subscribe(inout SubscriptionProfile subs)
	  raises (InvalidSubscription);

	/*!
	 * @if jp
	 * @brief Unsubscribe する
	 * @else
	 * @brief Unsubscribe this Port
	 * @endif
	 */
    RtmRes unsubscribe(in SubscriptionID id) raises(NoSubscription);

		/*!
	 * @if jp
	 * @brief Unsubscribe されたことを知らせる
	 * @else
	 * @brief Notify unsubscription of this ID's subscription
	 * @endif
	 */
	RtmRes notify_unsubscribe(in SubscriptionID id) raises(NoSubscription);

	/*!
	 * @if jp
	 * @brief Port のプロファイル
	 * @else
	 * @brief Port profile
	 * @endif
	 */
	readonly attribute PortProfile profile;

	/*!
	 * @if jp
	 * @brief OutPort をサブスクライブしているInPortのリスト
	 * @else
	 * @brief Subscribing InPorts list
	 * @endif
	 */
	readonly attribute SubscriptionList subscriptions;
  };
};
#endif // __RTCPortBase_idl__
