// RTC.idl

#include "SDOPackage.idl"

#pragma prefix "omg.org"

module RTC {
	typedef SDOPackage::UniqueIdentifier	UniqueIdentifier;
	typedef SDOPackage::NVList		NVList;
	typedef SDOPackage::SDO			DistributedObject;
	typedef SDOPackage::SDOService		Service;

	enum ReturnCode_t {
		OK,
		ERROR,
		BAD_PARAMETER,
		UNSUPPORTED,
		OUT_OF_RESOURCES,
		PRECONDITION_NOT_MET
	};

	enum LifeCycleState {
		CREATED_STATE,
		INACTIVE_STATE,
		ACTIVE_STATE,
		ERROR_STATE,
		FINALIZED_STATE
	};

	interface LifeCycle {
		ReturnCode_t initialize();
		ReturnCode_t finalize();
		boolean is_alive();
		ReturnCode_t reset();
		ReturnCode_t exit();
	};

	interface ExecutionContext;

	interface ComponentAction {
		ReturnCode_t on_initialize();
		ReturnCode_t on_finalize();
		ReturnCode_t on_startup(
			in ExecutionContext exec_context);
		ReturnCode_t on_shutdown(
			in ExecutionContext exec_context);
		ReturnCode_t on_activated(
			in ExecutionContext exec_context);
		ReturnCode_t on_deactivated(
			in ExecutionContext exec_context);
		ReturnCode_t on_aborting(
			in ExecutionContext exec_context);
		ReturnCode_t on_error(in ExecutionContext exec_context);
		ReturnCode_t on_reset(in ExecutionContext exec_context);
	};


	interface LightweightRTObject : LifeCycle, ComponentAction {
	};

	enum ExecutionKind {
		PERIODIC,
		EVENT_DRIVEN,
		OTHER
	};

	interface ExecutionContext {
		boolean is_running();
		ReturnCode_t start();
		ReturnCode_t stop();
		double get_rate();
		ReturnCode_t set_rate(in double rate);
		ReturnCode_t activate_component(
			in LightweightRTObject comp);
		ReturnCode_t deactivate_component(
			in LightweightRTObject comp);
		LifeCycleState get_component_state(
			in LightweightRTObject comp);
		ExecutionKind get_kind();
	};


	interface DataFlowComposite {
	};

	interface DataFlowComponentAction {
		ReturnCode_t on_execute(
			in ExecutionContext exec_context);
		ReturnCode_t on_state_update(
			in ExecutionContext exec_context);
		ReturnCode_t on_rate_changed(
			in ExecutionContext exec_context);
	};

	interface DataFlowParticipant :	DataFlowComponentAction {
	};


	interface Fsm {
	};

	interface FsmComponentAction {
		ReturnCode_t on_transition(
			in LightweightRTObject comp,
			in ExecutionContext exec_context);
	};

	interface FsmParticipant : FsmComponentAction {
	};


	interface Mode {
	};

	typedef sequence<Mode> ModeList;

	interface ModeCapable {
		Mode get_default_mode();
		Mode get_current_mode();
		Mode get_current_mode_in_context(
			in ExecutionContext exec_context);
		Mode get_pending_mode();
		Mode get_pending_mode_in_context(
			in ExecutionContext exec_context);
		ReturnCode_t set_mode(
			in Mode new_mode,
			in boolean immediate);
	};

	interface MultiModeComponentAction {
		ReturnCode_t on_mode_changed(
			in LightweightRTObject comp,
			in ExecutionContext exec_context);
	};

	interface MultiModeObject :	ModeCapable,
					MultiModeComponentAction {
	};


	interface RTObject;

	enum PortInterfacePolarity {
		PROVIDED,
		REQUIRED
	};

	struct PortInterfaceProfile {
		string instance_name;
		string type_name;
		PortInterfacePolarity polarity;
	};

	typedef sequence<PortInterfaceProfile> PortInterfaceProfileList;

	interface Port;
	typedef sequence<Port> PortList;
	typedef sequence<RTObject> RTCList;

	struct ConnectorProfile {
		string name;
		UniqueIdentifier connector_id;
		PortList ports;
		NVList properties;
	};

	typedef sequence<ConnectorProfile> ConnectorProfileList;

	struct PortProfile {
		string name;
		PortInterfaceProfileList interfaces;
		Port port_ref;
		ConnectorProfileList connector_profiles;
		RTObject owner;
		NVList properties;
	};

	typedef sequence<PortProfile> PortProfileList;

	struct ExecutionContextProfile {
		ExecutionKind kind;
		double rate;
		RTObject owner;
		RTCList participants;
		NVList properties;
	};

	typedef sequence<ExecutionContextProfile>
	ExecutionContextProfileList;

	struct ComponentProfile {
		string instance_name;
		string type_name;
		string description;
		string version;
		string vendor;
		string category;
		PortProfileList port_profiles;
		RTObject parent;
		NVList properties;
	};

	typedef sequence<ComponentProfile> ComponentProfileList; 

	interface Port : Service {
		PortProfile get_port_profile();
		ConnectorProfileList get_connector_profiles();
		ConnectorProfile get_connector_profile(
			in UniqueIdentifier connector_id);
		ReturnCode_t connect(
			in ConnectorProfile connector_profile);
		ReturnCode_t disconnect(in UniqueIdentifier connector_id);
		ReturnCode_t disconnect_all();
	};

	interface ExecutionContextAdmin : ExecutionContext, Service {
		ExecutionContextProfile get_profile();
		ReturnCode_t add(
			in ComponentProfile comp_profile, in long index);
		ReturnCode_t remove(
			in ComponentProfile comp_profile);
	};

	typedef sequence<ExecutionContextAdmin>
	ExecutionContextAdminList;

	interface RTObject : LightweightRTObject, DistributedObject {
		ComponentProfile get_component_profile();
		PortList get_ports();
		ExecutionContextAdminList
			get_execution_context_admins();
	};
};
